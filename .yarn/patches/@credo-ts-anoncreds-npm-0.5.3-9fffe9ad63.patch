diff --git a/build/formats/AnonCredsCredentialFormatService.js b/build/formats/AnonCredsCredentialFormatService.js
index 32b00024498dab50a3482df27e6f97671009678e..03ff3ac13977262d77b2fba48cf111ec7a31b30a 100644
--- a/build/formats/AnonCredsCredentialFormatService.js
+++ b/build/formats/AnonCredsCredentialFormatService.js
@@ -203,7 +203,7 @@ class AnonCredsCredentialFormatService {
             const revocationStatusListResult = await (0, utils_1.fetchRevocationStatusList)(agentContext, revocationRegistryDefinitionId, (0, utils_1.dateToTimestamp)(new Date()));
             revocationStatusList = revocationStatusListResult.revocationStatusList;
         }
-        const { credential } = await anonCredsIssuerService.createCredential(agentContext, {
+        const { credential, credentialRevocationId } = await anonCredsIssuerService.createCredential(agentContext, {
             credentialOffer,
             credentialRequest,
             credentialValues: (0, credential_1.convertAttributesToCredentialValues)(credentialAttributes),
@@ -211,6 +211,19 @@ class AnonCredsCredentialFormatService {
             revocationRegistryIndex,
             revocationStatusList,
         });
+
+        // If the credential is revocable, store the revocation identifiers in the credential record
+        if (credential.rev_reg_id) {
+            credentialRecord.metadata.add<AnonCredsCredentialMetadata>(AnonCredsCredentialMetadataKey, {
+            revocationRegistryId: revocationRegistryDefinitionId ?? undefined,
+            credentialRevocationId: credentialRevocationId ?? undefined,
+            })
+            credentialRecord.setTags({
+            anonCredsRevocationRegistryId: revocationRegistryDefinitionId,
+            anonCredsCredentialRevocationId: credentialRevocationId,
+            })
+        }
+
         const format = new core_1.CredentialFormatSpec({
             attachmentId,
             format: ANONCREDS_CREDENTIAL,
diff --git a/build/formats/LegacyIndyCredentialFormatService.js b/build/formats/LegacyIndyCredentialFormatService.js
index 05f6bfef79ed716036430de6903348c11675a131..0f09bd59b8db5243e082a3f093d23bea89278d3c 100644
--- a/build/formats/LegacyIndyCredentialFormatService.js
+++ b/build/formats/LegacyIndyCredentialFormatService.js
@@ -198,6 +198,7 @@ class LegacyIndyCredentialFormatService {
             });
             credentialRecord.setTags({
                 anonCredsRevocationRegistryId: credential.rev_reg_id,
+                anonCredsUnqualifiedRevocationRegistryId: credential.rev_reg_id,
                 anonCredsCredentialRevocationId: credentialRevocationId,
             });
         }
@@ -256,6 +257,7 @@ class LegacyIndyCredentialFormatService {
             });
             credentialRecord.setTags({
                 anonCredsRevocationRegistryId: credential.revocationRegistryId,
+                anonCredsUnqualifiedRevocationRegistryId: anonCredsCredential.rev_reg_id,
                 anonCredsCredentialRevocationId: credential.credentialRevocationId,
             });
         }
diff --git a/build/updates/0.4-0.5/anonCredsCredentialRecord.js b/build/updates/0.4-0.5/anonCredsCredentialRecord.js
index 915dffae9bd592aa489ef8ce5c31c9d3a8ce2ec3..b34aadfa008c6e5035823efbf139a044a8cabb24 100644
--- a/build/updates/0.4-0.5/anonCredsCredentialRecord.js
+++ b/build/updates/0.4-0.5/anonCredsCredentialRecord.js
@@ -112,6 +112,14 @@ async function migrateLegacyToW3cCredential(agentContext, legacyRecord) {
                 credentialRecordType: 'w3c',
                 credentialRecordId: w3cCredentialRecord.id,
             };
+            // If using unqualified dids, store both qualified/unqualified revRegId forms
+            // to allow retrieving it from revocation notification service
+            if (legacyTags.revocationRegistryId && indyNamespace) {
+                relatedCredentialExchangeRecord.setTags({
+                    anonCredsRevocationRegistryId: (0, indyIdentifiers_1.getQualifiedDidIndyDid)(legacyTags.revocationRegistryId, indyNamespace),
+                    anonCredsUnqualifiedRevocationRegistryId: (0, indyIdentifiers_1.getUnQualifiedDidIndyDid)(legacyTags.revocationRegistryId),
+                })
+            }
             await credentialExchangeRepository.update(agentContext, relatedCredentialExchangeRecord);
         }
     }
diff --git a/build/utils/indyIdentifiers.js b/build/utils/indyIdentifiers.js
index ffa72b308239894b65fc796254e5c458299065fe..0702fb0d2a552434f79c0ecdc134357280e4a4a1 100644
--- a/build/utils/indyIdentifiers.js
+++ b/build/utils/indyIdentifiers.js
@@ -167,6 +167,7 @@ function getIndyNamespaceFromIndyDid(identifier) {
 }
 exports.getIndyNamespaceFromIndyDid = getIndyNamespaceFromIndyDid;
 function getUnQualifiedDidIndyDid(identifier) {
+    if (isUnqualifiedIndyDid(identifier)) return identifier;
     if (isDidIndySchemaId(identifier)) {
         const { schemaName, schemaVersion, namespaceIdentifier } = parseIndySchemaId(identifier);
         return getUnqualifiedSchemaId(namespaceIdentifier, schemaName, schemaVersion);
diff --git a/build/utils/w3cAnonCredsUtils.js b/build/utils/w3cAnonCredsUtils.js
index ffd736f2261e9187b00e471c2ed1b2f4863960b9..5b365a10ca64926b46bef14e04d47745ba5d8574 100644
--- a/build/utils/w3cAnonCredsUtils.js
+++ b/build/utils/w3cAnonCredsUtils.js
@@ -104,7 +104,7 @@ exports.getStoreCredentialOptions = getStoreCredentialOptions;
 function getW3cRecordAnonCredsTags(options) {
     var _a;
     const { credentialSubject, issuerId, schema, schemaId, credentialDefinitionId, revocationRegistryId, credentialRevocationId, linkSecretId, methodName, } = options;
-    const anonCredsCredentialRecordTags = Object.assign({ anonCredsLinkSecretId: linkSecretId, anonCredsCredentialDefinitionId: credentialDefinitionId, anonCredsSchemaId: schemaId, anonCredsSchemaName: schema.name, anonCredsSchemaIssuerId: schema.issuerId, anonCredsSchemaVersion: schema.version, anonCredsMethodName: methodName, anonCredsRevocationRegistryId: revocationRegistryId, anonCredsCredentialRevocationId: credentialRevocationId }, ((0, indyIdentifiers_1.isIndyDid)(issuerId) && {
+    const anonCredsCredentialRecordTags = Object.assign({ anonCredsLinkSecretId: linkSecretId, anonCredsCredentialDefinitionId: credentialDefinitionId, anonCredsSchemaId: schemaId, anonCredsSchemaName: schema.name, anonCredsSchemaIssuerId: schema.issuerId, anonCredsSchemaVersion: schema.version, anonCredsMethodName: methodName, anonCredsRevocationRegistryId: revocationRegistryId, anonCredsCredentialRevocationId: credentialRevocationId }, (((0, indyIdentifiers_1.isIndyDid)(issuerId) || (0, indyIdentifiers_1.isUnqualifiedIndyDid(issuerId))) && {
         anonCredsUnqualifiedIssuerId: (0, indyIdentifiers_1.getUnQualifiedDidIndyDid)(issuerId),
         anonCredsUnqualifiedCredentialDefinitionId: (0, indyIdentifiers_1.getUnQualifiedDidIndyDid)(credentialDefinitionId),
         anonCredsUnqualifiedSchemaId: (0, indyIdentifiers_1.getUnQualifiedDidIndyDid)(schemaId),
